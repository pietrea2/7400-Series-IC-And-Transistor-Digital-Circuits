// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/31/2025 02:29:15"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          binary_counter_adder_4bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module binary_counter_adder_4bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clr0_NOT;
reg clr1_NOT;
reg count_0;
reg count_1;
// wires                                               
wire cout;
wire s0;
wire s1;
wire s2;
wire s3;

// assign statements (if any)                          
binary_counter_adder_4bit i1 (
// port map - connection between master ports and signals/registers   
	.clr0_NOT(clr0_NOT),
	.clr1_NOT(clr1_NOT),
	.count_0(count_0),
	.count_1(count_1),
	.cout(cout),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.s3(s3)
);
initial 
begin 
#1000000 $finish;
end 

// count_0
initial
begin
	repeat(3)
	begin
		count_0 = 1'b0;
		count_0 = #10000 1'b1;
		# 10000;
	end
	count_0 = 1'b0;
end 

// clr0_NOT
initial
begin
	clr0_NOT = 1'b1;
	clr0_NOT = #130000 1'b0;
	clr0_NOT = #20000 1'b1;
end 

// count_1
initial
begin
	count_1 = 1'b0;
	count_1 = #80000 1'b1;
	# 10000;
	repeat(4)
	begin
		count_1 = 1'b0;
		count_1 = #10000 1'b1;
		# 10000;
	end
	count_1 = 1'b0;
end 

// clr1_NOT
initial
begin
	clr1_NOT = 1'b1;
end 
endmodule

