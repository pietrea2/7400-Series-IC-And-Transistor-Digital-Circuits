/*
 * Generated by Digital. Don't modify this file!
 * Any changes will be lost if this file is regenerated.
 */

module DIG_D_FF_AS_1bit
#(
    parameter Default = 0
)
(
   input Set,
   input D,
   input C,
   input Clr,
   output Q,
   output \~Q
);
    reg state;

    assign Q = state;
    assign \~Q  = ~state;

    always @ (posedge C or posedge Clr or posedge Set)
    begin
        if (Set)
            state <= 1'b1;
        else if (Clr)
            state <= 'h0;
        else
            state <= D;
    end

    initial begin
        state = Default;
    end
endmodule

module Driver
(
    input in,
    input sel,
    output out
);
    assign out = (sel == 1'b1)? in : 1'bz;
endmodule

// quad 3-state D flip-flop with common clock and reset
module \74173  (
  input D0,
  input D1,
  input D2,
  input D3,
  input CLK,
  input RES,
  input DE1,
  input DE2,
  input OE1,
  input OE2,
  input VCC,
  input GND,
  output Q0,
  output Q1,
  output Q2,
  output Q3
);
  wire s0;
  wire s1;
  wire s2;
  wire s3;
  wire s4;
  wire s5;
  wire s6;
  wire s7;
  wire s8;
  wire s9;
  wire s10;
  assign s3 = (DE1 | DE2);
  assign s4 = ~ (OE1 | OE2);
  assign s2 = ~ s3;
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i0 (
    .Set( 1'b0 ),
    .D( s0 ),
    .C( CLK ),
    .Clr( RES ),
    .Q( s1 )
  );
  assign s0 = ((s1 & s3) | (D0 & s2));
  Driver Driver_i1 (
    .in( s1 ),
    .sel( s4 ),
    .out( Q0 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i2 (
    .Set( 1'b0 ),
    .D( s5 ),
    .C( CLK ),
    .Clr( RES ),
    .Q( s6 )
  );
  assign s5 = ((s6 & s3) | (D1 & s2));
  Driver Driver_i3 (
    .in( s6 ),
    .sel( s4 ),
    .out( Q1 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i4 (
    .Set( 1'b0 ),
    .D( s7 ),
    .C( CLK ),
    .Clr( RES ),
    .Q( s8 )
  );
  assign s7 = ((s8 & s3) | (D2 & s2));
  Driver Driver_i5 (
    .in( s8 ),
    .sel( s4 ),
    .out( Q2 )
  );
  DIG_D_FF_AS_1bit #(
    .Default(0)
  )
  DIG_D_FF_AS_1bit_i6 (
    .Set( 1'b0 ),
    .D( s9 ),
    .C( CLK ),
    .Clr( RES ),
    .Q( s10 )
  );
  assign s9 = ((s10 & s3) | (D3 & s2));
  Driver Driver_i7 (
    .in( s10 ),
    .sel( s4 ),
    .out( Q3 )
  );
endmodule

module \4_Bit_D_Type_Register  (
  input Clear,
  input D0,
  input D1,
  input D2,
  input D3,
  input Clock,
  output Q0,
  output Q1,
  output Q2,
  output Q3
);
  \74173  \74173_i0 (
    .OE1( 1'b0 ),
    .OE2( 1'b0 ),
    .CLK( Clock ),
    .GND( 1'b0 ),
    .DE1( 1'b0 ),
    .DE2( 1'b0 ),
    .D3( D3 ),
    .D2( D2 ),
    .D1( D1 ),
    .D0( D0 ),
    .RES( Clear ),
    .VCC( 1'b1 ),
    .Q0( Q0 ),
    .Q1( Q1 ),
    .Q2( Q2 ),
    .Q3( Q3 )
  );
endmodule
