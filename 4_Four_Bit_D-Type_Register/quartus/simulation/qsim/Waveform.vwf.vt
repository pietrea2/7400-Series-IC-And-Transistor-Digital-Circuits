// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/31/2025 01:48:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          register_4bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module register_4bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg clr;
reg D0;
reg D1;
reg D2;
reg D3;
reg Data_Enable0;
reg Data_Enable1;
reg Out_Enable0;
reg Out_Enable1;
// wires                                               
wire Q0;
wire Q1;
wire Q2;
wire Q3;

// assign statements (if any)                          
register_4bit i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clr(clr),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.Data_Enable0(Data_Enable0),
	.Data_Enable1(Data_Enable1),
	.Out_Enable0(Out_Enable0),
	.Out_Enable1(Out_Enable1),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// clr
initial
begin
	clr = 1'b0;
	clr = #520000 1'b1;
	clr = #40000 1'b0;
end 

// D0
always
begin
	D0 = 1'b0;
	D0 = #20000 1'b1;
	#20000;
end 

// D1
initial
begin
	repeat(12)
	begin
		D1 = 1'b0;
		D1 = #40000 1'b1;
		# 40000;
	end
	D1 = 1'b0;
end 

// D2
initial
begin
	repeat(6)
	begin
		D2 = 1'b0;
		D2 = #80000 1'b1;
		# 80000;
	end
	D2 = 1'b0;
end 

// D3
initial
begin
	repeat(3)
	begin
		D3 = 1'b0;
		D3 = #160000 1'b1;
		# 160000;
	end
	D3 = 1'b0;
end 

// Data_Enable0
initial
begin
	Data_Enable0 = 1'b0;
end 

// Data_Enable1
initial
begin
	Data_Enable1 = 1'b0;
end 

// Out_Enable0
initial
begin
	Out_Enable0 = 1'b0;
	Out_Enable0 = #610000 1'b1;
	Out_Enable0 = #30000 1'b0;
end 

// Out_Enable1
initial
begin
	Out_Enable1 = 1'b0;
	Out_Enable1 = #610000 1'b1;
	Out_Enable1 = #30000 1'b0;
end 
endmodule

